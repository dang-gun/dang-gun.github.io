(()=>{"use strict";var e={321:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AxeDomHelper=void 0,t.AxeDomHelper=class{constructor(e){this.DomHelperOptionDefult={OptionUseIs:!1,AtagClickEventCancel:!1,AtagClickEventCallback:null},this.DomHelperOption={OptionUseIs:!1,AtagClickEventCancel:!1,AtagClickEventCallback:null},this.DomHelperOption=null==e?Object.assign({},this.DomHelperOptionDefult):Object.assign({},this.DomHelperOptionDefult,e)}DomHelping(e,t){null==t&&(t=this.DomHelperOption),this.DomHelping_ori(e,t)}DomHelping_ori(e,t){let a=t;!1!==a.OptionUseIs&&e.querySelectorAll("a").forEach(((e,t)=>{let r=e.getAttribute("hrefOnly");null===r&&(r=e.getAttribute("hrefonly")),""===r||(!0===a.AtagClickEventCancel&&null!==a.AtagClickEventCallback?e.addEventListener("click",(function(e){e.preventDefault(),a.AtagClickEventCallback(e)})):!1===a.AtagClickEventCancel&&null!==a.AtagClickEventCallback?e.addEventListener("click",(function(e){a.AtagClickEventCallback(e)})):!0===a.AtagClickEventCancel&&null===a.AtagClickEventCallback&&e.addEventListener("click",(function(e){e.preventDefault()})))}))}DomReplace(e){for(let t=0;t<e.length;++t){let a=e[t];!0===a.DomIs&&(""===a.Temp||null!==a.Temp&&void 0!==a.Temp&&(a.data=a.Temp,a.Temp=null))}}}},713:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},407:function(e,t,a){var r=this&&this.__createBinding||(Object.create?function(e,t,a,r){void 0===r&&(r=a);var i=Object.getOwnPropertyDescriptor(t,a);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[a]}}),Object.defineProperty(e,r,i)}:function(e,t,a,r){void 0===r&&(r=a),e[r]=t[a]}),i=this&&this.__exportStar||function(e,t){for(var a in e)"default"===a||Object.prototype.hasOwnProperty.call(t,a)||r(t,e,a)};Object.defineProperty(t,"__esModule",{value:!0}),i(a(311),t),i(a(316),t),i(a(545),t);const n=a(253);i(a(253),t);const s=a(877),o=a(321);i(a(321),t),i(a(713),t),t.default=class{constructor(e){this.BindCount=0,this.CommentDelete=!1,this.LastList=[],this.ListSet=e=>{this.LastList=e},this.FindName=e=>this.LastList.find((t=>t.Name===e)),this.AxeDomHelper=new o.AxeDomHelper(e),this.OverwatchDomPushHelper=new s.OverwatchDomPushHelper}BindOverwatch(e,t,a){if(!e)throw"검색할 dom 을 전달해야 합니다.";this.LastList=t,t.forEach((e=>{++this.BindCount,e.MyNumber=this.BindCount}));let r=[];r.push(...Array.from(this.NodeMatch_Normal(e,t).childNodes)),e.replaceChildren(...r),this.DomHelper(e,a),this.AxeDomHelper.DomReplace(t)}NodeMatch_Text(e,t){let a=[],r=[];r.push({Text:e.textContent,Overwatch:null,Match:!1});for(let e=0;e<t.length;++e){let a=t[e];!0===a.OverwatchingOneIs&&!0===a.OneDataIs||this.NodeMatch_String(r,a)}for(let e=0;e<r.length;++e){let t=r[e];if(this.OverwatchDomPushHelper.OverwatchSet(t.Overwatch),null===t.Overwatch)a.push(document.createTextNode(t.Text));else if(1===t.Overwatch.OverwatchingOutputType&&0===t.Overwatch.OverwatchingType)a.push(document.createTextNode(t.Overwatch.data));else if(1!==t.Overwatch.OverwatchingOutputType||1!==t.Overwatch.OverwatchingType&&2!==t.Overwatch.OverwatchingType){if(2===t.Overwatch.OverwatchingOutputType){if(""===t.Text)continue;if(null!==t.Overwatch){let e=document.createElement("template");e.insertAdjacentHTML("beforeend",t.Overwatch.data),a.push(e.firstChild),1!==t.Overwatch.OverwatchingType&&2!==t.Overwatch.OverwatchingType||this.OverwatchDomPushHelper.Dom_Push_HTMLElement(e.firstChild,t.Text)}else a.push(document.createTextNode(t.Text))}}else{if(""===t.Text)continue;if(null!==t.Overwatch){let e=document.createTextNode(t.Overwatch.data);a.push(e),this.OverwatchDomPushHelper.Dom_Push_Node(e,t.Text)}else a.push(document.createTextNode(t.Text))}}return a}NodeMatch_Normal(e,t){let a=e.cloneNode(!1),r=Array.from(e.childNodes);for(let e=0;e<r.length;++e){let i=r[e];if(Node.TEXT_NODE===i.nodeType){let e=this.NodeMatch_Text(i,t);for(let t=0;t<e.length;++t){let r=e[t];a.appendChild(r)}}else if(Node.COMMENT_NODE===i.nodeType)!1===this.CommentDelete&&a.appendChild(i);else{let e=this.NodeMatch_Normal(i,t);this.NodeMatch_Attr(i,e,t),a.appendChild(e)}}return a}NodeMatch_TextCut(e,t){let a=[],r=e,i=-1;for(;!0!==t.OverwatchingOneIs||!0!==t.OneDataIs;){t.NameFindString.lastIndex=0;let e=t.NameFindString.exec(r);if(null===e||0>=e.length)break;if(i=e.index,t.OneDataIs=!0,0!==i&&a.push({Text:r.substring(0,i),Overwatch:null,Match:!1}),a.push({Text:e[0],Overwatch:t,Match:!0}),r=r.substring(i+e[0].length),""===r)break}return a.push({Text:r,Overwatch:null,Match:!1}),a}NodeMatch_String(e,t){for(let a=0;a<e.length;++a){let r=e[a],i=0;t.NameFindString.lastIndex=0;let n=t.NameFindString.exec(r.Text);if(null!==n&&(i=n.index),0<=i&&!1===r.Match){let i=this.NodeMatch_TextCut(r.Text,t);e.splice(a,1,...i)}}}NodeMatch_Attr(e,t,a){let r=Array.from(t.attributes);for(let i=0;i<r.length;++i){let n=r[i];this.NodeMatch_AttrOne(n,a,e,t)}}NodeMatch_AttrOne(e,t,a,r){for(let a=0;a<t.length;++a){let i=t[a];if(this.OverwatchDomPushHelper.OverwatchSet(i),(!0!==i.OverwatchingOneIs||!0!==i.OneDataIs)&&2!==i.OverwatchingOutputType)if(3===i.OverwatchingOutputType||4===i.OverwatchingOutputType){i.NameFindString.lastIndex=0;let t=i.NameFindString.exec(e.value);null!==t&&0<t.length&&(r.removeAttribute(e.name),i.OneDataIs=!0,1===i.OverwatchingType||2===i.OverwatchingType?this.OverwatchDomPushHelper.Dom_Push_Event(r,t[0],e.name,!0):this.OverwatchDomPushHelper.Dom_Push_Event(r,t[0],e.name,!1))}else{let t=!1;if(!1===t&&"value"===e.name&&(3===i.OverwatchingType||4===i.OverwatchingType)){t=!0,i.NameFindString.lastIndex=0;let a=i.NameFindString.exec(e.value);null!==a&&0<a.length&&1===i.OverwatchingOutputType&&(e.value=i.data,i.OneDataIs=!0,this.OverwatchDomPushHelper.Dom_Push_Attr_ValueMonitoring(r,a[0]))}if(!1===t&&""===e.value){t=!0,i.NameFindStringLowerCase.lastIndex=0;let a=i.NameFindStringLowerCase.exec(e.name);if(null===a);else if(0<a.length)if(5===i.OverwatchingOutputType){let t=r;t.removeAttribute(e.name),this.OverwatchDomPushHelper.Dom_Push_Dom(t,a[0])}else{let t=r;t.removeAttribute(e.name),t.setAttribute(i.data,""),i.OneDataIs=!0,1!==i.OverwatchingType&&2!==i.OverwatchingType||this.OverwatchDomPushHelper.Dom_Push_Valueless(r,a[0])}}if(!1===t){i.NameFindString.lastIndex=0;let a=i.NameFindString.exec(e.value);null===a||(e.value===a[0]?(t=!0,e.value=i.data,i.OneDataIs=!0,1===i.OverwatchingType?this.OverwatchDomPushHelper.Dom_Push_ReplaceValue(e,a[0]):2===i.OverwatchingType&&this.OverwatchDomPushHelper.Dom_Push_OneValue(e,a[0])):(t=!0,!0===i.OverwatchingOneIs?e.value=e.value.replace(a[0],i.data):e.value=this.ReplaceAll(e.value,a[0],i.data),i.OneDataIs=!0,1!==i.OverwatchingType&&2!==i.OverwatchingType||this.OverwatchDomPushHelper.Dom_Push_ReplaceValue(e,a[0])))}}}}TextNodesIs(e){let t=!1;const a=document.createTreeWalker(e,NodeFilter.SHOW_TEXT);for(;a.nextNode();){let e=a.currentNode.textContent;if(e=e.replace(/\n/g,""),e=e.replace(/\t/g,""),""!==e){t=!0;break}}return t}ReplaceAll(e,t,a){return e.replace(new RegExp(t,"g"),a)}DomHelper(e,t){this.AxeDomHelper.DomHelping(e,t)}New_All(e){return new n.Overwatch(e)}New_OutputString(e,t){return new n.Overwatch({Name:e,FirstData:t,OverwatchingOutputType:1,OverwatchingType:0,OverwatchingOneIs:!1})}New_MonitoringString(e,t){return new n.Overwatch({Name:e,FirstData:t,OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})}}},316:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},253:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Overwatch=void 0,t.Overwatch=class{constructor(e){this.MyNumber=0,this.Name="",this.TossOption={},this._DataNow="",this.Temp=null,this.DataNowGet=()=>{let e="";return!0===this.DomIsOri?e=this._DataNow:!0===this.ValueMonitoringIs?0<this.Dom_AxeViewListOri.length&&(e=this.Dom_AxeViewListOri[0].Dom.value):e=this._DataNow,e},this.DataNowSet=function(e){let t=this._DataNow;this._DataNow=e;let a=this._DataNow;if(null!==this.Dom_AxeViewListOri&&0<this.Dom_AxeViewListOri.length)for(let e=0;e<this.Dom_AxeViewListOri.length;++e){let r=this.Dom_AxeViewList[e],i=(r.DataView,this.AxeDomSet_DataEdit(this,r,a));if(3===r.AxeViewDomType)r.DataView=i,r.Dom.nodeValue=r.DataView;else if(4===r.AxeViewDomType)1==a instanceof HTMLElement&&t.parentElement.replaceChild(a,t);else if(6===r.AxeViewDomType||9===r.AxeViewDomType)r.DataView=i,r.Dom.value=r.DataView;else if(7===r.AxeViewDomType){let e=r.Dom,a=r.DataView;""===a&&(a=t),r.DataView=i,""===r.DataView&&(r.DataView=t+"_AxeViewTemp"+this.MyNumber),!0===this.OverwatchingOneIs?e.value=e.value.replace(a,r.DataView):e.value=this.ReplaceAll(e.value,a,r.DataView)}else if(5===r.AxeViewDomType){let e=r.Dom;e.removeAttribute(t.toLowerCase()),e.setAttribute(a,"")}else 8===r.AxeViewDomType?(r.Dom.removeEventListener(r.EventName,r.Event),r.Event=a,r.Dom.addEventListener(r.EventName,r.Event)):1==a instanceof Element||1==a instanceof HTMLElement||1==a instanceof Node?(r.Dom.innerHTML="",r.Dom.insertAdjacentElement("beforeend",a)):(r.DataView=i,r.Dom.innerHTML=r.DataView)}},this.OverwatchingOneIs=!1,this.Dom_AxeViewListOri=[],this.OneDataIs=!1,this.ValueMonitoringIsOri=!1,this.DomIsOri=!1,this.AxeDomSet_DataEdit=(e,t,a)=>a,this.Name=e.Name,this.NameFindStringOri=new RegExp(`{{${this.Name}+}}|{{${this.Name}+@.*}}`,"g"),this.NameFindStringLowerCaseOri=new RegExp(`{{${this.Name.toLowerCase()}+}}|{{${this.Name.toLowerCase()}+@.*}}`,"g"),void 0!==e.TossOption&&null!==e.TossOption&&(this.TossOption=e.TossOption),void 0!==e.AxeDomSet_DataEdit&&null!==e.AxeDomSet_DataEdit&&(this.AxeDomSet_DataEdit=e.AxeDomSet_DataEdit),""===e.FirstData||" "===e.FirstData?5===this.OverwatchingOutputType?this._DataNow="":1===this.OverwatchingOutputType?this._DataNow=" ":2===this.OverwatchingOutputType&&(this._DataNow="<div></div>"):this._DataNow=e.FirstData,this.OverwatchingOutputType=e.OverwatchingOutputType,this.OverwatchingType=e.OverwatchingType,this.OverwatchingOneIs=e.OverwatchingOneIs}get NameFindString(){return this.NameFindStringOri}get NameFindStringLowerCase(){return this.NameFindStringLowerCaseOri}TossOptionFirst(){return this.Dom_AxeViewList[0].TossOption}set DataNow(e){this._DataNow=e}get Dom_AxeViewList(){return this.Dom_AxeViewListOri}get Dom(){return this.Dom_AxeViewList[0].Dom}Dom_Clear(){this.Dom_AxeViewListOri=[]}get data(){return this.DataNowGet()}set data(e){this.DataNowSet(e)}DataRefresh(){this.data=this.data}get ValueMonitoringIs(){return this.ValueMonitoringIsOri}set ValueMonitoringIs(e){this.ValueMonitoringIsOri=e}get DomIs(){return this.DomIsOri}set DomIs(e){this.DomIsOri=e}ReplaceAll(e,t,a){return e.replace(new RegExp(t,"g"),a)}}},877:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OverwatchDomPushHelper=void 0,t.OverwatchDomPushHelper=class{constructor(){this._MyOw=null,this.GetOption=e=>e}get MyOw(){return this._MyOw}OverwatchSet(e){this._MyOw=e}Dom_Push_Element(e,t){this.Dom_Push_HTMLElement(e,t)}Dom_Push_HTMLElement(e,t){let a=this.MatchToTossOpt(t);this._MyOw.Dom_AxeViewList.push({AxeViewDomType:2,Dom:e,DataView:"",EventName:null,TossOption:a,TossOptionType:()=>this.GetOption(a)})}Dom_Push_Node(e,t){let a=this.MatchToTossOpt(t);this._MyOw.Dom_AxeViewList.push({AxeViewDomType:3,Dom:e,DataView:"",EventName:null,TossOption:a,TossOptionType:()=>this.GetOption(a)})}Dom_Push_Dom(e,t){this._MyOw.Temp=this._MyOw.data,this._MyOw.DataNow=e,this._MyOw.DomIs=!0;let a=this.MatchToTossOpt(t);this._MyOw.Dom_AxeViewList.push({AxeViewDomType:4,Dom:e,DataView:"",EventName:null,TossOption:a,TossOptionType:()=>this.GetOption(a)})}Dom_Push_Valueless(e,t){let a=this.MatchToTossOpt(t);this._MyOw.Dom_AxeViewList.push({AxeViewDomType:5,Dom:e,DataView:"",EventName:null,TossOption:a,TossOptionType:()=>this.GetOption(a)})}Dom_Push_OneValue(e,t){let a=this.MatchToTossOpt(t);this._MyOw.Dom_AxeViewList.push({AxeViewDomType:6,Dom:e,DataView:"",EventName:null,TossOption:a,TossOptionType:()=>this.GetOption(a)})}Dom_Push_ReplaceValue(e,t){let a=this.MatchToTossOpt(t);this._MyOw.Dom_AxeViewList.push({AxeViewDomType:7,Dom:e,DataView:"",TossOption:a,TossOptionType:()=>this.GetOption(a)})}Dom_Push_Event(e,t,a,r){let i=this._MyOw,n=this.MatchToTossOpt(t);4===this._MyOw.OverwatchingOutputType&&2<=a.length&&"on"===a.substring(0,2).toLowerCase()&&(a=a.substring(2));let s={AxeViewDomType:8,Dom:e,DataView:"",EventName:a,TossOption:n,TossOptionType:()=>this.GetOption(n),Event:function(e){i.data(e,s.Dom,i)}};!0===r&&this._MyOw.Dom_AxeViewList.push(s),s.Dom.removeEventListener(a,s.Event),s.Dom.addEventListener(a,s.Event)}Dom_Push_Attr_ValueMonitoring(e,t){if(0===this._MyOw.Dom_AxeViewList.length){let a,r=this._MyOw,i=this.MatchToTossOpt(t);a=4===r.OverwatchingType?{AxeViewDomType:9,Dom:e,DataView:"",EventName:"input",Event:function(e){r.data=this.value},TossOption:i,TossOptionType:()=>this.GetOption(i)}:{AxeViewDomType:9,Dom:e,DataView:"",EventName:"change",Event:function(e){r.data=this.value},TossOption:i,TossOptionType:()=>this.GetOption(i)},r.Dom_AxeViewList.push(a),this._MyOw.ValueMonitoringIs=!0,a.Dom.removeEventListener(a.EventName,a.Event),a.Dom.addEventListener(a.EventName,a.Event)}}MatchToTossOpt(e){let t={};if(""===e||null==e)t=Object.assign({},this.MyOw.TossOption);else{let a=e.split("@");if(1<a.length){let e=a[1].substring(0,a[1].length-2).split(","),r=JSON.parse("{}");for(let t=0;t<e.length;++t){let a=e[t],i=a.split(":");2<=i.length&&(r[i[0]]=a.substring(i[0].length+1))}t=Object.assign({},this.MyOw.TossOption,r)}}return t}}},311:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},545:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},559:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=a(407);t.default=class{constructor(){this.AxeView=new r.default,this.arrTarget=[],this.AxeView.CommentDelete=!1,this.arrTarget.push(this.AxeView.New_MonitoringString("StringTest1","")),this.arrTarget.push(this.AxeView.New_MonitoringString("CssTest1","AxeCss")),this.arrTarget.push(new r.Overwatch({Name:"RadioChange",FirstData:(e,t,a)=>{switch(e.target.value){case"1":this.arrTarget[0].data="background-color: #ff0000;",this.arrTarget[1].data="background-color: #ff0000;";break;case"2":this.arrTarget[0].data="background-color: #00ff00;",this.arrTarget[1].data="background-color: #00ff00;";break;case"3":this.arrTarget[0].data="background-color: #0000ff;",this.arrTarget[1].data="background-color: #0000ff;"}},OverwatchingOutputType:4,OverwatchingType:1,OverwatchingOneIs:!1})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset"),this.arrTarget)}}},667:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=a(407);t.default=class{constructor(){this.AxeView=new r.default,this.arrTarget=[],this.AxeView.CommentDelete=!1,this.arrTarget.push(this.AxeView.New_MonitoringString("OutData","클릭하기전")),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset"),this.arrTarget),this.AxeView.DomHelper(document.getElementById("divAxeViewTset"),{OptionUseIs:!0,AtagClickEventCancel:!0,AtagClickEventCallback:e=>{console.log("A tag click : "+e.target.pathname),this.arrTarget[0].data="클릭된 주소 : "+e.target.pathname}})}}},463:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=a(407);t.default=class{constructor(){this.AxeView=new r.default,this.arrTarget=[],this.TestCilck=()=>{this.arrTarget[2].data="클릭했다!!!",this.arrTarget[3].data="<h2>클릭했다!!HTML</h2>",this.arrTarget[4].data="Click1",this.arrTarget[5].data="Check2",this.arrTarget[6].data=function(e,t,a){alert("재바인딩됨"),console.log(e),console.log(t),console.log(a)},this.arrTarget[7].data="";let e=document.getElementById("divTemp1").getAttribute("axeTest2");document.getElementById("divTemp1").setAttribute("axeTest2",e+" AddTest"),this.arrTarget[8].data="Click4",console.log("클릭함 : "+this.arrTarget[9].data)},this.TestCilck2=()=>{this.arrTarget[7].data="ReClick"},this.AxeView.CommentDelete=!0,this.arrTarget.push(new r.Overwatch({Name:"StringTest",FirstData:"문자열 출력!!",OverwatchingOutputType:1,OverwatchingType:0,OverwatchingOneIs:!0})),this.arrTarget.push(new r.Overwatch({Name:"HtmlTest",FirstData:"<h3>Html 출력!</h3>",OverwatchingOutputType:2,OverwatchingType:0,OverwatchingOneIs:!0})),this.arrTarget.push(new r.Overwatch({Name:"MonitoringString",FirstData:"모니터링중(문자열)",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget.push(new r.Overwatch({Name:"MonitoringHtml",FirstData:"<h1>모니터링중(Html)</h1>",OverwatchingOutputType:2,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget.push(new r.Overwatch({Name:"MonitoringAttr1",FirstData:"attrTest1",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget.push(new r.Overwatch({Name:"MonitoringAttr2",FirstData:"attrTest2",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget.push(new r.Overwatch({Name:"FunctionTest",FirstData:function(e,t,a){alert("바인딩됨"),console.log(t),console.log(e),console.log(a)},OverwatchingOutputType:4,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget.push(new r.Overwatch({Name:"CssTest",FirstData:"CssAdd",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget.push(new r.Overwatch({Name:"MonitoringAttr3",FirstData:"attrTest3",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget.push(new r.Overwatch({Name:"MonitoringAttr4",FirstData:"attrTest4",OverwatchingOutputType:1,OverwatchingType:3,OverwatchingOneIs:!1})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset"),this.arrTarget),this.AxeView.DomHelper(document.getElementById("divAxeViewTset"),{OptionUseIs:!0,AtagClickEventCancel:!0,AtagClickEventCallback:function(e){console.log("A tag click : "+e.target.pathname)}}),document.getElementById("btnClick").onclick=this.TestCilck,document.getElementById("btnClick2").onclick=this.TestCilck2}}},947:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=a(407);t.default=class{constructor(){this.AxeView=new r.default,this.arrTarget=[],this.domNew=document.createElement("div"),this.TextInput=()=>{let e=document.getElementById("txtInput").value;this.domNew.innerHTML="<h5>"+e+"</h5>"},this.TextInputNew=()=>{let e=document.getElementById("txtInput").value,t=document.createElement("div");return t.innerHTML="<h5>"+e+"</h5>",t},this.AxeView.CommentDelete=!1,this.domNew.innerHTML="<h5>추가됐습니다.</h5>",this.arrTarget.push(new r.Overwatch({Name:"HtmlDom",FirstData:this.domNew,OverwatchingOutputType:5,OverwatchingType:1,OverwatchingOneIs:!0})),this.arrTarget.push(new r.Overwatch({Name:"HtmlDom2",FirstData:"",OverwatchingOutputType:5,OverwatchingType:1,OverwatchingOneIs:!0})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset"),this.arrTarget),document.getElementById("btnClick").onclick=e=>{this.TextInput();let t=document.querySelector("#divAxeViewTset > div");document.querySelector("#divAxeViewTset").replaceChild(this.domNew,t)},document.getElementById("btnClick2").onclick=e=>{this.TextInput(),this.arrTarget[0].data=this.domNew,this.arrTarget[1].data=this.TextInputNew()}}}},831:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=a(407);t.default=class{constructor(){this.AxeView=new r.default,this.arrTarget1=[],this.arrTarget2=[],this.EventChange1=(e,t,a)=>{let r=e.target;switch(r.value){case"1":this.arrTarget2[0].data="background-color: #ff0000;",this.arrTarget2[1].data="background-color: #ff0000;";break;case"2":this.arrTarget2[0].data="background-color: #00ff00;",this.arrTarget2[1].data="background-color: #00ff00;";break;case"3":this.arrTarget2[0].data="background-color: #0000ff;",this.arrTarget2[1].data="background-color: #0000ff;"}console.log(r.value)},this.EventChange2=(e,t,a)=>{let r=e.target;switch(r.value){case"1":this.arrTarget2[0].data="background-color: #880000;",this.arrTarget2[1].data="background-color: #880000;";break;case"2":this.arrTarget2[0].data="background-color: #008800;",this.arrTarget2[1].data="background-color: #008800;";break;case"3":this.arrTarget2[0].data="background-color: #000088;",this.arrTarget2[1].data="background-color: #000088;"}console.log(r.value)},this.AxeView.CommentDelete=!1,this.arrTarget1.push(this.AxeView.New_MonitoringString("StringTest1","")),this.arrTarget1.push(this.AxeView.New_MonitoringString("CssTest1","AxeCss")),this.arrTarget1.push(new r.Overwatch({Name:"RadioChange",FirstData:(e,t,a)=>{switch(e.target.value){case"1":this.arrTarget1[0].data="background-color: #ff0000;",this.arrTarget1[1].data="background-color: #ff0000;";break;case"2":this.arrTarget1[0].data="background-color: #00ff00;",this.arrTarget1[1].data="background-color: #00ff00;";break;case"3":this.arrTarget1[0].data="background-color: #0000ff;",this.arrTarget1[1].data="background-color: #0000ff;"}},OverwatchingOutputType:4,OverwatchingType:1,OverwatchingOneIs:!1})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset1"),this.arrTarget1),this.arrTarget2.push(this.AxeView.New_MonitoringString("StringTest1","")),this.arrTarget2.push(this.AxeView.New_MonitoringString("CssTest1","AxeCss")),this.arrTarget2.push(new r.Overwatch({Name:"RadioChange",FirstData:this.EventChange1,OverwatchingOutputType:4,OverwatchingType:1,OverwatchingOneIs:!1})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset2"),this.arrTarget2),document.getElementById("btnEventChange1").onclick=e=>{this.arrTarget2[2].data=this.EventChange1},document.getElementById("btnEventChange2").onclick=e=>{this.arrTarget2[2].data=this.EventChange2}}}},963:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=a(407);t.default=class{constructor(){this.AxeView=new r.default,this.arrTarget=[],this.AxeView.CommentDelete=!1;let e=document.createElement("div");e.innerHTML="<h5>돔1</h5>",this.arrTarget.push(new r.Overwatch({Name:"HtmlDom",FirstData:e,OverwatchingOutputType:5,OverwatchingType:1,OverwatchingOneIs:!0}));let t=document.createElement("div");t.innerHTML="<h5>돔2</h5>",this.arrTarget.push(new r.Overwatch({Name:"HtmlDom2",FirstData:t,OverwatchingOutputType:5,OverwatchingType:1,OverwatchingOneIs:!0,TossOption:JSON.parse('{"coma":"false", "Message":"메시지 입니다."}')})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset"),this.arrTarget),this.arrTarget[0].data.innerHTML="옵션 : "+JSON.stringify(this.arrTarget[0].TossOption),this.arrTarget[1].data.innerHTML="옵션 : "+JSON.stringify(this.arrTarget[1].TossOption),console.log("to TossTemp : ");let a=this.arrTarget[1].TossOptionFirst();console.log(a),console.log("msg : "+a.Message),console.log("to TossTemp2 : ");let i=this.arrTarget[1].TossOptionFirst();console.log(i),console.log("msg : "+i.Message),console.log("to menu :");let n=this.arrTarget[1].TossOptionFirst();console.log(n),console.log("msg : "+n.Message)}}},953:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=a(407);t.default=class{constructor(){this.AxeView=new r.default,this.arrTarget=[],this.TextInput=()=>Number(document.getElementById("txtInput").value),this.AxeView.CommentDelete=!1,this.arrTarget.push(new r.Overwatch({Name:"Money",FirstData:"0",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1,AxeDomSet_DataEdit:this.AxeDomSet_DataEdit})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset"),this.arrTarget),document.getElementById("btnClick").onclick=e=>{this.arrTarget[0].data=this.TextInput()}}AxeDomSet_DataEdit(e,t,a){let r="",i=t.TossOptionType(),n=Number(a);return!1===isNaN(n)&&(r="true"===i.coma?n.toLocaleString():n.toString(),""!==i.currency&&(r=i.currency+" "+r)),r}}},190:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=a(407);t.default=class{constructor(){this.AxeView=new r.default,this.arrTarget0=[],this.arrTarget1=[],this.arrTarget2=[],this.arrTarget3=[],this.AxeView.CommentDelete=!0,this.arrTarget0.push(this.AxeView.New_MonitoringString("StringTest1","")),this.arrTarget0.push(this.AxeView.New_MonitoringString("CssTest1","AxeCss")),this.arrTarget0.push(new r.Overwatch({Name:"RadioChange",FirstData:(e,t,a)=>{switch(e.target.value){case"1":this.arrTarget0[0].data="background-color: #ff0000;",this.arrTarget0[1].data="background-color: #ff0000;";break;case"2":this.arrTarget0[0].data="background-color: #00ff00;",this.arrTarget0[1].data="background-color: #00ff00;";break;case"3":this.arrTarget0[0].data="background-color: #0000ff;",this.arrTarget0[1].data="background-color: #0000ff;"}},OverwatchingOutputType:4,OverwatchingType:1,OverwatchingOneIs:!1})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset0"),this.arrTarget0),this.arrTarget1.push(new r.Overwatch({Name:"StringTest1",FirstData:"문자열 출력!!",OverwatchingOutputType:1,OverwatchingType:0,OverwatchingOneIs:!0})),this.arrTarget1.push(new r.Overwatch({Name:"StringTest2",FirstData:"모니터링중(문자열)",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset1"),this.arrTarget1),document.getElementById("btnStringTest1").onclick=e=>{let t=document.getElementById("txtInputStringTest1").value;this.arrTarget1[0].data=t,this.arrTarget1[1].data=t},this.arrTarget2.push(new r.Overwatch({Name:"HtmlTest1",FirstData:"<div>HTML div!!</div>",OverwatchingOutputType:2,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget2.push(new r.Overwatch({Name:"HtmlTest2",FirstData:"<a href=''>HTML a!!</a>",OverwatchingOutputType:2,OverwatchingType:1,OverwatchingOneIs:!1})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset2"),this.arrTarget2),document.getElementById("btnHtmlTest1").onclick=e=>{let t=document.getElementById("txtHtmlTest1").value;this.arrTarget2[0].data="<div>"+t+"</div>",this.arrTarget2[1].data="<a href=''>"+t+"</a>"},document.getElementById("txtHtmlTest1").value="<div>기본 div</div>",this.arrTarget3.push(new r.Overwatch({Name:"InputMonitoringTest1",FirstData:"첫 데이터1",OverwatchingOutputType:1,OverwatchingType:4,OverwatchingOneIs:!1})),this.arrTarget3.push(new r.Overwatch({Name:"InputMonitoringTest2",FirstData:"첫 데이터2",OverwatchingOutputType:1,OverwatchingType:3,OverwatchingOneIs:!1})),this.arrTarget3.push(new r.Overwatch({Name:"InputMonitoringTest3",FirstData:"모니터링중(문자열)1",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})),this.arrTarget3.push(new r.Overwatch({Name:"InputMonitoringTest4",FirstData:"모니터링중(문자열)2",OverwatchingOutputType:1,OverwatchingType:1,OverwatchingOneIs:!1})),this.AxeView.BindOverwatch(document.getElementById("divAxeViewTset3"),this.arrTarget3),this.arrTarget3[0].Dom.addEventListener("input",(e=>{this.arrTarget3[1].data=this.arrTarget3[0].data,this.arrTarget3[2].data=this.arrTarget3[0].data})),document.getElementById("btnInputMonitoringTest1").onclick=e=>{this.arrTarget3[3].data=this.arrTarget3[1].data}}}}},t={};function a(r){var i=t[r];if(void 0!==i)return i.exports;var n=t[r]={exports:{}};return e[r].call(n.exports,n,n.exports,a),n.exports}(()=>{const e=a(190),t=a(947),r=a(667),i=a(963),n=a(953),s=a(831),o=a(463),h=a(559);window.app=new class{constructor(){this.PageNow=null;let a="../",l=window.location.pathname.split("/");switch(l[l.length-1]){case"index.html":a="";break;case"test_StartUp.html":this.PageNow=new e.default;break;case"test_Dom.html":this.PageNow=new t.default;break;case"test_ATag.html":this.PageNow=new r.default;break;case"test_Option1.html":this.PageNow=new i.default;break;case"test_Option2.html":this.PageNow=new n.default;break;case"test_Event.html":this.PageNow=new s.default;break;case"test_BasicSample.html":this.PageNow=new o.default;break;case"test_01.html":this.PageNow=new h.default}let c=document.getElementById("divMenu");c.innerHTML="",c.insertAdjacentHTML("beforeend",'<a href="'+a+'index.html">홈</a><br />'),c.insertAdjacentHTML("beforeend",'<a href="'+a+'Example/test_StartUp.html">시작하다</a><br />'),c.insertAdjacentHTML("beforeend",'<a href="'+a+'Example/test_Dom.html">HTML 돔 처리</a><br />'),c.insertAdjacentHTML("beforeend",'<a href="'+a+'Example/test_ATag.html">A태그 처리</a><br />'),c.insertAdjacentHTML("beforeend",'<a href="'+a+'Example/test_Option1.html">옵션 처리</a><br />'),c.insertAdjacentHTML("beforeend",'<a href="'+a+'Example/test_Option2.html">개별 옵션 처리</a><br />'),c.insertAdjacentHTML("beforeend",'<a href="'+a+'Example/test_Event.html">이벤트 연결</a><br />'),c.insertAdjacentHTML("beforeend","<br />"),c.insertAdjacentHTML("beforeend",'<a href="'+a+'Example/test_BasicSample.html">기본 셈플</a><br />'),c.insertAdjacentHTML("beforeend",'<a href="'+a+'Example/test_01.html">테스트</a><br />'),c.style.marginBottom="2rem"}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,